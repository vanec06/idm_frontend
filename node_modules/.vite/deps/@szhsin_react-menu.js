import {
  require_prop_types
} from "./chunk-CZUAWVZQ.js";
import "./chunk-JXLTFIRC.js";
import {
  require_jsx_runtime
} from "./chunk-U62YBD46.js";
import {
  require_react_dom
} from "./chunk-ZRYTYW4C.js";
import {
  require_react
} from "./chunk-YP55OVAM.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@szhsin/react-menu/dist/es/_virtual/_rollupPluginBabelHelpers.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// node_modules/@szhsin/react-menu/dist/es/components/MenuButton.js
var import_react3 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());

// node_modules/@szhsin/react-menu/dist/es/utils/utils.js
var import_react_dom = __toESM(require_react_dom());
var isMenuOpen = function isMenuOpen2(state) {
  return !!state && state[0] === "o";
};
var batchedUpdates = import_react_dom.unstable_batchedUpdates || function(callback) {
  return callback();
};
var values = Object.values || function(obj) {
  return Object.keys(obj).map(function(key) {
    return obj[key];
  });
};
var floatEqual = function floatEqual2(a, b, diff) {
  if (diff === void 0) {
    diff = 1e-4;
  }
  return Math.abs(a - b) < diff;
};
var getTransition = function getTransition2(transition, name) {
  return transition === true || !!(transition && transition[name]);
};
var safeCall = function safeCall2(fn, arg) {
  return typeof fn === "function" ? fn(arg) : fn;
};
var internalKey = "_szhsinMenu";
var getName = function getName2(component) {
  return component[internalKey];
};
var defineName = function defineName2(name, component) {
  return Object.defineProperty(component, internalKey, {
    value: name
  });
};
var mergeProps = function mergeProps2(target, source) {
  source && Object.keys(source).forEach(function(key) {
    var targetProp = target[key];
    var sourceProp = source[key];
    if (typeof sourceProp === "function" && targetProp) {
      target[key] = function() {
        sourceProp.apply(void 0, arguments);
        targetProp.apply(void 0, arguments);
      };
    } else {
      target[key] = sourceProp;
    }
  });
  return target;
};
var parsePadding = function parsePadding2(paddingStr) {
  if (typeof paddingStr !== "string")
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  var padding = paddingStr.trim().split(/\s+/, 4).map(parseFloat);
  var top = !isNaN(padding[0]) ? padding[0] : 0;
  var right = !isNaN(padding[1]) ? padding[1] : top;
  return {
    top,
    right,
    bottom: !isNaN(padding[2]) ? padding[2] : top,
    left: !isNaN(padding[3]) ? padding[3] : right
  };
};
var getScrollAncestor = function getScrollAncestor2(node3) {
  while (node3) {
    node3 = node3.parentNode;
    if (!node3 || node3 === document.body || !node3.parentNode)
      return;
    var _getComputedStyle = getComputedStyle(node3), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    if (/auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX))
      return node3;
  }
};
function commonProps(isDisabled, isHovering) {
  return {
    "aria-disabled": isDisabled || void 0,
    tabIndex: isHovering ? 0 : -1
  };
}
function indexOfNode(nodeList, node3) {
  for (var i = 0; i < nodeList.length; i++) {
    if (nodeList[i] === node3)
      return i;
  }
  return -1;
}

// node_modules/@szhsin/react-menu/dist/es/hooks/useBEM.js
var import_react = __toESM(require_react());
var useBEM = function useBEM2(_ref) {
  var block = _ref.block, element2 = _ref.element, modifiers = _ref.modifiers, className = _ref.className;
  return (0, import_react.useMemo)(function() {
    var blockElement = element2 ? block + "__" + element2 : block;
    var classString = blockElement;
    modifiers && Object.keys(modifiers).forEach(function(name) {
      var value = modifiers[name];
      if (value)
        classString += " " + blockElement + "--" + (value === true ? name : name + "-" + value);
    });
    var expandedClassName = typeof className === "function" ? className(modifiers) : className;
    if (typeof expandedClassName === "string") {
      expandedClassName = expandedClassName.trim();
      if (expandedClassName)
        classString += " " + expandedClassName;
    }
    return classString;
  }, [block, element2, modifiers, className]);
};

// node_modules/@szhsin/react-menu/dist/es/utils/propTypes.js
var import_prop_types = __toESM(require_prop_types());
var stylePropTypes = function stylePropTypes2(name) {
  var _ref;
  return _ref = {}, _ref[name ? name + "ClassName" : "className"] = (0, import_prop_types.oneOfType)([import_prop_types.string, import_prop_types.func]), _ref;
};
var menuPropTypes = _extends({
  className: import_prop_types.string
}, stylePropTypes("menu"), stylePropTypes("arrow"), {
  focusProps: import_prop_types.object,
  menuStyle: import_prop_types.object,
  arrowStyle: import_prop_types.object,
  arrow: import_prop_types.bool,
  setDownOverflow: import_prop_types.bool,
  offsetX: import_prop_types.number,
  offsetY: import_prop_types.number,
  align: (0, import_prop_types.oneOf)(["start", "center", "end"]),
  direction: (0, import_prop_types.oneOf)(["left", "right", "top", "bottom"]),
  position: (0, import_prop_types.oneOf)(["auto", "anchor", "initial"]),
  overflow: (0, import_prop_types.oneOf)(["auto", "visible", "hidden"])
});
var rootMenuPropTypes = _extends({}, menuPropTypes, {
  containerProps: import_prop_types.object,
  initialMounted: import_prop_types.bool,
  unmountOnClose: import_prop_types.bool,
  transition: (0, import_prop_types.oneOfType)([import_prop_types.bool, (0, import_prop_types.exact)({
    open: import_prop_types.bool,
    close: import_prop_types.bool,
    item: import_prop_types.bool
  })]),
  transitionTimeout: import_prop_types.number,
  boundingBoxRef: import_prop_types.object,
  boundingBoxPadding: import_prop_types.string,
  reposition: (0, import_prop_types.oneOf)(["auto", "initial"]),
  repositionFlag: (0, import_prop_types.oneOfType)([import_prop_types.string, import_prop_types.number]),
  viewScroll: (0, import_prop_types.oneOf)(["auto", "close", "initial"]),
  submenuOpenDelay: import_prop_types.number,
  submenuCloseDelay: import_prop_types.number,
  portal: (0, import_prop_types.oneOfType)([import_prop_types.bool, (0, import_prop_types.exact)({
    target: import_prop_types.object,
    stablePosition: import_prop_types.bool
  })]),
  theming: import_prop_types.string,
  onItemClick: import_prop_types.func
});
var uncontrolledMenuPropTypes = {
  instanceRef: (0, import_prop_types.oneOfType)([import_prop_types.object, import_prop_types.func]),
  onMenuChange: import_prop_types.func
};

// node_modules/@szhsin/react-menu/dist/es/utils/constants.js
var import_react2 = __toESM(require_react());
var menuContainerClass = "szh-menu-container";
var menuClass = "szh-menu";
var menuButtonClass = "szh-menu-button";
var menuArrowClass = "arrow";
var menuItemClass = "item";
var menuDividerClass = "divider";
var menuHeaderClass = "header";
var menuGroupClass = "group";
var subMenuClass = "submenu";
var radioGroupClass = "radio-group";
var HoverItemContext = (0, import_react2.createContext)();
var MenuListItemContext = (0, import_react2.createContext)({});
var MenuListContext = (0, import_react2.createContext)({});
var EventHandlersContext = (0, import_react2.createContext)({});
var RadioGroupContext = (0, import_react2.createContext)({});
var SettingsContext = (0, import_react2.createContext)({});
var Keys = Object.freeze({
  ENTER: "Enter",
  ESC: "Escape",
  SPACE: " ",
  HOME: "Home",
  END: "End",
  LEFT: "ArrowLeft",
  RIGHT: "ArrowRight",
  UP: "ArrowUp",
  DOWN: "ArrowDown"
});
var HoverActionTypes = Object.freeze({
  RESET: 0,
  SET: 1,
  UNSET: 2,
  INCREASE: 3,
  DECREASE: 4,
  FIRST: 5,
  LAST: 6,
  SET_INDEX: 7
});
var CloseReason = Object.freeze({
  CLICK: "click",
  CANCEL: "cancel",
  BLUR: "blur",
  SCROLL: "scroll"
});
var FocusPositions = Object.freeze({
  FIRST: "first",
  LAST: "last"
});
var MenuStateMap = Object.freeze({
  entering: "opening",
  entered: "open",
  exiting: "closing",
  exited: "closed"
});
var positionAbsolute = "absolute";
var roleNone = "presentation";
var roleMenuitem = "menuitem";
var dummyItemProps = {
  "aria-hidden": true,
  role: roleMenuitem
};

// node_modules/@szhsin/react-menu/dist/es/components/MenuButton.js
var _excluded = ["className", "isOpen", "disabled", "children"];
var MenuButton = defineName("MenuButton", (0, import_react3.forwardRef)(function MenuButton2(_ref, ref) {
  var className = _ref.className, isOpen = _ref.isOpen, disabled = _ref.disabled, children = _ref.children, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
  var modifiers = (0, import_react3.useMemo)(function() {
    return {
      open: isOpen
    };
  }, [isOpen]);
  return (0, import_jsx_runtime.jsx)("button", _extends({
    "aria-haspopup": true,
    "aria-expanded": isOpen,
    "aria-disabled": disabled || void 0,
    type: "button",
    disabled
  }, restProps, {
    ref,
    className: useBEM({
      block: menuButtonClass,
      modifiers,
      className
    }),
    children
  }));
}));
true ? MenuButton.propTypes = _extends({}, stylePropTypes(), {
  isOpen: import_prop_types2.bool,
  disabled: import_prop_types2.bool
}) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/Menu.js
var import_react14 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/@szhsin/react-menu/dist/es/components/ControlledMenu.js
var import_react9 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@szhsin/react-menu/dist/es/components/MenuList.js
var import_react8 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@szhsin/react-menu/dist/es/components/MenuContainer.js
var import_react4 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var MenuContainer = function MenuContainer2(_ref) {
  var className = _ref.className, containerRef = _ref.containerRef, containerProps = _ref.containerProps, children = _ref.children, isOpen = _ref.isOpen, skipOpen = _ref.skipOpen, theming = _ref.theming, transition = _ref.transition, onClose = _ref.onClose;
  var itemTransition = getTransition(transition, "item");
  var onKeyDown = function onKeyDown2(_ref2) {
    var key = _ref2.key;
    switch (key) {
      case Keys.ESC:
        safeCall(onClose, {
          key,
          reason: CloseReason.CANCEL
        });
        break;
    }
  };
  var onBlur = function onBlur2(e) {
    if (isOpen && !e.currentTarget.contains(e.relatedTarget || document.activeElement)) {
      safeCall(onClose, {
        reason: CloseReason.BLUR
      });
      if (skipOpen) {
        skipOpen.current = true;
        setTimeout(function() {
          return skipOpen.current = false;
        }, 300);
      }
    }
  };
  return (0, import_jsx_runtime2.jsx)("div", _extends({}, mergeProps({
    onKeyDown,
    onBlur
  }, containerProps), {
    className: useBEM({
      block: menuContainerClass,
      modifiers: (0, import_react4.useMemo)(function() {
        return {
          theme: theming,
          itemTransition
        };
      }, [theming, itemTransition]),
      className
    }),
    style: _extends({
      position: "absolute"
    }, containerProps == null ? void 0 : containerProps.style),
    ref: containerRef,
    children
  }));
};

// node_modules/@szhsin/react-menu/dist/es/components/MenuList.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());

// node_modules/@szhsin/react-menu/dist/es/utils/submenuCtx.js
var createSubmenuCtx = function createSubmenuCtx2() {
  var timer, count = 0;
  return {
    toggle: function toggle(isOpen) {
      isOpen ? count++ : count--;
      count = Math.max(count, 0);
    },
    on: function on(closeDelay, pending, settled) {
      if (count) {
        if (!timer)
          timer = setTimeout(function() {
            timer = 0;
            pending();
          }, closeDelay);
      } else {
        settled == null ? void 0 : settled();
      }
    },
    off: function off() {
      if (timer) {
        clearTimeout(timer);
        timer = 0;
      }
    }
  };
};

// node_modules/@szhsin/react-menu/dist/es/hooks/useItems.js
var import_react5 = __toESM(require_react());
var useItems = function useItems2(menuRef, focusRef) {
  var _useState = (0, import_react5.useState)(), hoverItem = _useState[0], setHoverItem = _useState[1];
  var stateRef = (0, import_react5.useRef)({
    items: [],
    hoverIndex: -1,
    sorted: false
  });
  var mutableState = stateRef.current;
  var updateItems = (0, import_react5.useCallback)(function(item, isMounted) {
    var items = mutableState.items;
    if (!item) {
      mutableState.items = [];
    } else if (isMounted) {
      items.push(item);
    } else {
      var index = items.indexOf(item);
      if (index > -1) {
        items.splice(index, 1);
        if (item.contains(document.activeElement)) {
          focusRef.current.focus();
          setHoverItem();
        }
      }
    }
    mutableState.hoverIndex = -1;
    mutableState.sorted = false;
  }, [mutableState, focusRef]);
  var dispatch = (0, import_react5.useCallback)(function(actionType, item, nextIndex) {
    var items = mutableState.items, hoverIndex = mutableState.hoverIndex;
    var sortItems = function sortItems2() {
      if (mutableState.sorted)
        return;
      var orderedNodes = menuRef.current.querySelectorAll(".szh-menu__item");
      items.sort(function(a, b) {
        return indexOfNode(orderedNodes, a) - indexOfNode(orderedNodes, b);
      });
      mutableState.sorted = true;
    };
    var index = -1, newItem = void 0;
    switch (actionType) {
      case HoverActionTypes.RESET:
        break;
      case HoverActionTypes.SET:
        newItem = item;
        break;
      case HoverActionTypes.UNSET:
        newItem = function newItem2(prevItem) {
          return prevItem === item ? void 0 : prevItem;
        };
        break;
      case HoverActionTypes.FIRST:
        sortItems();
        index = 0;
        newItem = items[index];
        break;
      case HoverActionTypes.LAST:
        sortItems();
        index = items.length - 1;
        newItem = items[index];
        break;
      case HoverActionTypes.SET_INDEX:
        sortItems();
        index = nextIndex;
        newItem = items[index];
        break;
      case HoverActionTypes.INCREASE:
        sortItems();
        index = hoverIndex;
        if (index < 0)
          index = items.indexOf(item);
        index++;
        if (index >= items.length)
          index = 0;
        newItem = items[index];
        break;
      case HoverActionTypes.DECREASE:
        sortItems();
        index = hoverIndex;
        if (index < 0)
          index = items.indexOf(item);
        index--;
        if (index < 0)
          index = items.length - 1;
        newItem = items[index];
        break;
      default:
        if (true)
          throw new Error("[React-Menu] Unknown hover action type: " + actionType);
    }
    if (!newItem)
      index = -1;
    setHoverItem(newItem);
    mutableState.hoverIndex = index;
  }, [menuRef, mutableState]);
  return {
    hoverItem,
    dispatch,
    updateItems
  };
};

// node_modules/@szhsin/react-menu/dist/es/positionUtils/getPositionHelpers.js
var getPositionHelpers = function getPositionHelpers2(containerRef, menuRef, menuScroll, boundingBoxPadding) {
  var menuRect = menuRef.current.getBoundingClientRect();
  var containerRect = containerRef.current.getBoundingClientRect();
  var boundingRect = menuScroll === window ? {
    left: 0,
    top: 0,
    right: document.documentElement.clientWidth,
    bottom: window.innerHeight
  } : menuScroll.getBoundingClientRect();
  var padding = parsePadding(boundingBoxPadding);
  var getLeftOverflow = function getLeftOverflow2(x) {
    return x + containerRect.left - boundingRect.left - padding.left;
  };
  var getRightOverflow = function getRightOverflow2(x) {
    return x + containerRect.left + menuRect.width - boundingRect.right + padding.right;
  };
  var getTopOverflow = function getTopOverflow2(y) {
    return y + containerRect.top - boundingRect.top - padding.top;
  };
  var getBottomOverflow = function getBottomOverflow2(y) {
    return y + containerRect.top + menuRect.height - boundingRect.bottom + padding.bottom;
  };
  var confineHorizontally = function confineHorizontally2(x) {
    var leftOverflow = getLeftOverflow(x);
    if (leftOverflow < 0) {
      x -= leftOverflow;
    } else {
      var rightOverflow = getRightOverflow(x);
      if (rightOverflow > 0) {
        x -= rightOverflow;
        leftOverflow = getLeftOverflow(x);
        if (leftOverflow < 0)
          x -= leftOverflow;
      }
    }
    return x;
  };
  var confineVertically = function confineVertically2(y) {
    var topOverflow = getTopOverflow(y);
    if (topOverflow < 0) {
      y -= topOverflow;
    } else {
      var bottomOverflow = getBottomOverflow(y);
      if (bottomOverflow > 0) {
        y -= bottomOverflow;
        topOverflow = getTopOverflow(y);
        if (topOverflow < 0)
          y -= topOverflow;
      }
    }
    return y;
  };
  return {
    menuRect,
    containerRect,
    getLeftOverflow,
    getRightOverflow,
    getTopOverflow,
    getBottomOverflow,
    confineHorizontally,
    confineVertically
  };
};

// node_modules/@szhsin/react-menu/dist/es/positionUtils/placeArrowVertical.js
var placeArrowVertical = function placeArrowVertical2(_ref) {
  var arrowRef = _ref.arrowRef, menuY = _ref.menuY, anchorRect = _ref.anchorRect, containerRect = _ref.containerRect, menuRect = _ref.menuRect;
  var y = anchorRect.top - containerRect.top - menuY + anchorRect.height / 2;
  var offset = arrowRef.current.offsetHeight * 1.25;
  y = Math.max(offset, y);
  y = Math.min(y, menuRect.height - offset);
  return y;
};

// node_modules/@szhsin/react-menu/dist/es/positionUtils/placeLeftorRight.js
var placeLeftorRight = function placeLeftorRight2(_ref) {
  var anchorRect = _ref.anchorRect, containerRect = _ref.containerRect, menuRect = _ref.menuRect, placeLeftorRightY = _ref.placeLeftorRightY, placeLeftX = _ref.placeLeftX, placeRightX = _ref.placeRightX, getLeftOverflow = _ref.getLeftOverflow, getRightOverflow = _ref.getRightOverflow, confineHorizontally = _ref.confineHorizontally, confineVertically = _ref.confineVertically, arrowRef = _ref.arrowRef, arrow = _ref.arrow, direction = _ref.direction, position = _ref.position;
  var computedDirection = direction;
  var y = placeLeftorRightY;
  if (position !== "initial") {
    y = confineVertically(y);
    if (position === "anchor") {
      y = Math.min(y, anchorRect.bottom - containerRect.top);
      y = Math.max(y, anchorRect.top - containerRect.top - menuRect.height);
    }
  }
  var x, leftOverflow, rightOverflow;
  if (computedDirection === "left") {
    x = placeLeftX;
    if (position !== "initial") {
      leftOverflow = getLeftOverflow(x);
      if (leftOverflow < 0) {
        rightOverflow = getRightOverflow(placeRightX);
        if (rightOverflow <= 0 || -leftOverflow > rightOverflow) {
          x = placeRightX;
          computedDirection = "right";
        }
      }
    }
  } else {
    x = placeRightX;
    if (position !== "initial") {
      rightOverflow = getRightOverflow(x);
      if (rightOverflow > 0) {
        leftOverflow = getLeftOverflow(placeLeftX);
        if (leftOverflow >= 0 || -leftOverflow < rightOverflow) {
          x = placeLeftX;
          computedDirection = "left";
        }
      }
    }
  }
  if (position === "auto")
    x = confineHorizontally(x);
  var arrowY = arrow ? placeArrowVertical({
    menuY: y,
    arrowRef,
    anchorRect,
    containerRect,
    menuRect
  }) : void 0;
  return {
    arrowY,
    x,
    y,
    computedDirection
  };
};

// node_modules/@szhsin/react-menu/dist/es/positionUtils/placeArrowHorizontal.js
var placeArrowHorizontal = function placeArrowHorizontal2(_ref) {
  var arrowRef = _ref.arrowRef, menuX = _ref.menuX, anchorRect = _ref.anchorRect, containerRect = _ref.containerRect, menuRect = _ref.menuRect;
  var x = anchorRect.left - containerRect.left - menuX + anchorRect.width / 2;
  var offset = arrowRef.current.offsetWidth * 1.25;
  x = Math.max(offset, x);
  x = Math.min(x, menuRect.width - offset);
  return x;
};

// node_modules/@szhsin/react-menu/dist/es/positionUtils/placeToporBottom.js
var placeToporBottom = function placeToporBottom2(_ref) {
  var anchorRect = _ref.anchorRect, containerRect = _ref.containerRect, menuRect = _ref.menuRect, placeToporBottomX = _ref.placeToporBottomX, placeTopY = _ref.placeTopY, placeBottomY = _ref.placeBottomY, getTopOverflow = _ref.getTopOverflow, getBottomOverflow = _ref.getBottomOverflow, confineHorizontally = _ref.confineHorizontally, confineVertically = _ref.confineVertically, arrowRef = _ref.arrowRef, arrow = _ref.arrow, direction = _ref.direction, position = _ref.position;
  var computedDirection = direction === "top" ? "top" : "bottom";
  var x = placeToporBottomX;
  if (position !== "initial") {
    x = confineHorizontally(x);
    if (position === "anchor") {
      x = Math.min(x, anchorRect.right - containerRect.left);
      x = Math.max(x, anchorRect.left - containerRect.left - menuRect.width);
    }
  }
  var y, topOverflow, bottomOverflow;
  if (computedDirection === "top") {
    y = placeTopY;
    if (position !== "initial") {
      topOverflow = getTopOverflow(y);
      if (topOverflow < 0) {
        bottomOverflow = getBottomOverflow(placeBottomY);
        if (bottomOverflow <= 0 || -topOverflow > bottomOverflow) {
          y = placeBottomY;
          computedDirection = "bottom";
        }
      }
    }
  } else {
    y = placeBottomY;
    if (position !== "initial") {
      bottomOverflow = getBottomOverflow(y);
      if (bottomOverflow > 0) {
        topOverflow = getTopOverflow(placeTopY);
        if (topOverflow >= 0 || -topOverflow < bottomOverflow) {
          y = placeTopY;
          computedDirection = "top";
        }
      }
    }
  }
  if (position === "auto")
    y = confineVertically(y);
  var arrowX = arrow ? placeArrowHorizontal({
    menuX: x,
    arrowRef,
    anchorRect,
    containerRect,
    menuRect
  }) : void 0;
  return {
    arrowX,
    x,
    y,
    computedDirection
  };
};

// node_modules/@szhsin/react-menu/dist/es/positionUtils/positionMenu.js
var positionMenu = function positionMenu2(_ref) {
  var arrow = _ref.arrow, align = _ref.align, direction = _ref.direction, offsetX = _ref.offsetX, offsetY = _ref.offsetY, position = _ref.position, anchorRect = _ref.anchorRect, arrowRef = _ref.arrowRef, positionHelpers = _ref.positionHelpers;
  var menuRect = positionHelpers.menuRect, containerRect = positionHelpers.containerRect;
  var horizontalOffset = offsetX;
  var verticalOffset = offsetY;
  if (arrow) {
    if (direction === "left" || direction === "right") {
      horizontalOffset += arrowRef.current.offsetWidth;
    } else {
      verticalOffset += arrowRef.current.offsetHeight;
    }
  }
  var placeLeftX = anchorRect.left - containerRect.left - menuRect.width - horizontalOffset;
  var placeRightX = anchorRect.right - containerRect.left + horizontalOffset;
  var placeTopY = anchorRect.top - containerRect.top - menuRect.height - verticalOffset;
  var placeBottomY = anchorRect.bottom - containerRect.top + verticalOffset;
  var placeToporBottomX, placeLeftorRightY;
  if (align === "end") {
    placeToporBottomX = anchorRect.right - containerRect.left - menuRect.width;
    placeLeftorRightY = anchorRect.bottom - containerRect.top - menuRect.height;
  } else if (align === "center") {
    placeToporBottomX = anchorRect.left - containerRect.left - (menuRect.width - anchorRect.width) / 2;
    placeLeftorRightY = anchorRect.top - containerRect.top - (menuRect.height - anchorRect.height) / 2;
  } else {
    placeToporBottomX = anchorRect.left - containerRect.left;
    placeLeftorRightY = anchorRect.top - containerRect.top;
  }
  placeToporBottomX += horizontalOffset;
  placeLeftorRightY += verticalOffset;
  var options = _extends({}, positionHelpers, {
    anchorRect,
    placeLeftX,
    placeRightX,
    placeLeftorRightY,
    placeTopY,
    placeBottomY,
    placeToporBottomX,
    arrowRef,
    arrow,
    direction,
    position
  });
  switch (direction) {
    case "left":
    case "right":
      return placeLeftorRight(options);
    case "top":
    case "bottom":
    default:
      return placeToporBottom(options);
  }
};

// node_modules/@szhsin/react-menu/dist/es/hooks/useIsomorphicLayoutEffect.js
var import_react6 = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react6.useLayoutEffect : import_react6.useEffect;

// node_modules/@szhsin/react-menu/dist/es/hooks/useCombinedRef.js
var import_react7 = __toESM(require_react());
function setRef(ref, instance) {
  typeof ref === "function" ? ref(instance) : ref.current = instance;
}
var useCombinedRef = function useCombinedRef2(refA, refB) {
  return (0, import_react7.useMemo)(function() {
    if (!refA)
      return refB;
    if (!refB)
      return refA;
    return function(instance) {
      setRef(refA, instance);
      setRef(refB, instance);
    };
  }, [refA, refB]);
};

// node_modules/@szhsin/react-menu/dist/es/components/MenuList.js
var _excluded2 = ["ariaLabel", "menuClassName", "menuStyle", "arrowClassName", "arrowStyle", "anchorPoint", "anchorRef", "containerRef", "containerProps", "focusProps", "externalRef", "parentScrollingRef", "arrow", "align", "direction", "position", "overflow", "setDownOverflow", "repositionFlag", "captureFocus", "state", "endTransition", "isDisabled", "menuItemFocus", "offsetX", "offsetY", "children", "onClose"];
var MenuList = function MenuList2(_ref) {
  var ariaLabel = _ref.ariaLabel, menuClassName = _ref.menuClassName, menuStyle = _ref.menuStyle, arrowClassName = _ref.arrowClassName, arrowStyle = _ref.arrowStyle, anchorPoint = _ref.anchorPoint, anchorRef = _ref.anchorRef, containerRef = _ref.containerRef, containerProps = _ref.containerProps, focusProps = _ref.focusProps, externalRef = _ref.externalRef, parentScrollingRef = _ref.parentScrollingRef, arrow = _ref.arrow, _ref$align = _ref.align, align = _ref$align === void 0 ? "start" : _ref$align, _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? "bottom" : _ref$direction, _ref$position = _ref.position, position = _ref$position === void 0 ? "auto" : _ref$position, _ref$overflow = _ref.overflow, overflow = _ref$overflow === void 0 ? "visible" : _ref$overflow, setDownOverflow = _ref.setDownOverflow, repositionFlag = _ref.repositionFlag, _ref$captureFocus = _ref.captureFocus, captureFocus = _ref$captureFocus === void 0 ? true : _ref$captureFocus, state = _ref.state, endTransition = _ref.endTransition, isDisabled = _ref.isDisabled, menuItemFocus = _ref.menuItemFocus, _ref$offsetX = _ref.offsetX, offsetX = _ref$offsetX === void 0 ? 0 : _ref$offsetX, _ref$offsetY = _ref.offsetY, offsetY = _ref$offsetY === void 0 ? 0 : _ref$offsetY, children = _ref.children, onClose = _ref.onClose, restProps = _objectWithoutPropertiesLoose(_ref, _excluded2);
  var _useState = (0, import_react8.useState)({
    x: 0,
    y: 0
  }), menuPosition = _useState[0], setMenuPosition = _useState[1];
  var _useState2 = (0, import_react8.useState)({}), arrowPosition = _useState2[0], setArrowPosition = _useState2[1];
  var _useState3 = (0, import_react8.useState)(), overflowData = _useState3[0], setOverflowData = _useState3[1];
  var _useState4 = (0, import_react8.useState)(direction), expandedDirection = _useState4[0], setExpandedDirection = _useState4[1];
  var _useState5 = (0, import_react8.useState)(createSubmenuCtx), submenuCtx = _useState5[0];
  var _useReducer = (0, import_react8.useReducer)(function(c) {
    return c + 1;
  }, 1), reposSubmenu = _useReducer[0], forceReposSubmenu = _useReducer[1];
  var _useContext = (0, import_react8.useContext)(SettingsContext), transition = _useContext.transition, boundingBoxRef = _useContext.boundingBoxRef, boundingBoxPadding = _useContext.boundingBoxPadding, rootMenuRef = _useContext.rootMenuRef, rootAnchorRef = _useContext.rootAnchorRef, scrollNodesRef = _useContext.scrollNodesRef, reposition = _useContext.reposition, viewScroll = _useContext.viewScroll, submenuCloseDelay = _useContext.submenuCloseDelay;
  var _useContext2 = (0, import_react8.useContext)(MenuListContext), parentSubmenuCtx = _useContext2.submenuCtx, _useContext2$reposSub = _useContext2.reposSubmenu, reposFlag = _useContext2$reposSub === void 0 ? repositionFlag : _useContext2$reposSub;
  var menuRef = (0, import_react8.useRef)(null);
  var focusRef = (0, import_react8.useRef)();
  var arrowRef = (0, import_react8.useRef)();
  var prevOpen = (0, import_react8.useRef)(false);
  var latestMenuSize = (0, import_react8.useRef)({
    width: 0,
    height: 0
  });
  var latestHandlePosition = (0, import_react8.useRef)(function() {
  });
  var _useItems = useItems(menuRef, focusRef), hoverItem = _useItems.hoverItem, dispatch = _useItems.dispatch, updateItems = _useItems.updateItems;
  var isOpen = isMenuOpen(state);
  var openTransition = getTransition(transition, "open");
  var closeTransition = getTransition(transition, "close");
  var scrollNodes = scrollNodesRef.current;
  var onKeyDown = function onKeyDown2(e) {
    switch (e.key) {
      case Keys.HOME:
        dispatch(HoverActionTypes.FIRST);
        break;
      case Keys.END:
        dispatch(HoverActionTypes.LAST);
        break;
      case Keys.UP:
        dispatch(HoverActionTypes.DECREASE, hoverItem);
        break;
      case Keys.DOWN:
        dispatch(HoverActionTypes.INCREASE, hoverItem);
        break;
      case Keys.SPACE:
        if (e.target && e.target.className.indexOf(menuClass) !== -1) {
          e.preventDefault();
        }
        return;
      default:
        return;
    }
    e.preventDefault();
    e.stopPropagation();
  };
  var onAnimationEnd = function onAnimationEnd2() {
    if (state === "closing") {
      setOverflowData();
    }
    safeCall(endTransition);
  };
  var onPointerMove = function onPointerMove2(e) {
    e.stopPropagation();
    submenuCtx.on(submenuCloseDelay, function() {
      dispatch(HoverActionTypes.RESET);
      focusRef.current.focus();
    });
  };
  var onPointerLeave = function onPointerLeave2(e) {
    if (e.target === e.currentTarget)
      submenuCtx.off();
  };
  var handlePosition = (0, import_react8.useCallback)(function(noOverflowCheck) {
    var _anchorRef$current;
    var anchorRect = anchorRef ? (_anchorRef$current = anchorRef.current) == null ? void 0 : _anchorRef$current.getBoundingClientRect() : anchorPoint ? {
      left: anchorPoint.x,
      right: anchorPoint.x,
      top: anchorPoint.y,
      bottom: anchorPoint.y,
      width: 0,
      height: 0
    } : null;
    if (!anchorRect) {
      if (true) {
        console.warn("[React-Menu] Menu might not be positioned properly as one of the anchorRef or anchorPoint prop should be provided. If `anchorRef` is provided, the anchor must be mounted before menu is open.");
      }
      return;
    }
    if (!scrollNodes.menu) {
      scrollNodes.menu = (boundingBoxRef ? boundingBoxRef.current : getScrollAncestor(rootMenuRef.current)) || window;
    }
    var positionHelpers = getPositionHelpers(containerRef, menuRef, scrollNodes.menu, boundingBoxPadding);
    var _positionMenu = positionMenu({
      arrow,
      align,
      direction,
      offsetX,
      offsetY,
      position,
      anchorRect,
      arrowRef,
      positionHelpers
    }), arrowX = _positionMenu.arrowX, arrowY = _positionMenu.arrowY, x = _positionMenu.x, y = _positionMenu.y, computedDirection = _positionMenu.computedDirection;
    var menuRect = positionHelpers.menuRect;
    var menuHeight = menuRect.height;
    if (!noOverflowCheck && overflow !== "visible") {
      var getTopOverflow = positionHelpers.getTopOverflow, getBottomOverflow = positionHelpers.getBottomOverflow;
      var height, _overflowAmt;
      var prevHeight = latestMenuSize.current.height;
      var bottomOverflow = getBottomOverflow(y);
      if (bottomOverflow > 0 || floatEqual(bottomOverflow, 0) && floatEqual(menuHeight, prevHeight)) {
        height = menuHeight - bottomOverflow;
        _overflowAmt = bottomOverflow;
      } else {
        var topOverflow = getTopOverflow(y);
        if (topOverflow < 0 || floatEqual(topOverflow, 0) && floatEqual(menuHeight, prevHeight)) {
          height = menuHeight + topOverflow;
          _overflowAmt = 0 - topOverflow;
          if (height >= 0)
            y -= topOverflow;
        }
      }
      if (height >= 0) {
        menuHeight = height;
        setOverflowData({
          height,
          overflowAmt: _overflowAmt
        });
      } else {
        setOverflowData();
      }
    }
    if (arrow)
      setArrowPosition({
        x: arrowX,
        y: arrowY
      });
    setMenuPosition({
      x,
      y
    });
    setExpandedDirection(computedDirection);
    latestMenuSize.current = {
      width: menuRect.width,
      height: menuHeight
    };
  }, [arrow, align, boundingBoxPadding, direction, offsetX, offsetY, position, overflow, anchorPoint, anchorRef, containerRef, boundingBoxRef, rootMenuRef, scrollNodes]);
  useIsomorphicLayoutEffect(function() {
    if (isOpen) {
      handlePosition();
      if (prevOpen.current)
        forceReposSubmenu();
    }
    prevOpen.current = isOpen;
    latestHandlePosition.current = handlePosition;
  }, [isOpen, handlePosition, reposFlag]);
  useIsomorphicLayoutEffect(function() {
    if (overflowData && !setDownOverflow)
      menuRef.current.scrollTop = 0;
  }, [overflowData, setDownOverflow]);
  useIsomorphicLayoutEffect(function() {
    return updateItems;
  }, [updateItems]);
  (0, import_react8.useEffect)(function() {
    var menuScroll = scrollNodes.menu;
    if (!isOpen || !menuScroll)
      return;
    menuScroll = menuScroll.addEventListener ? menuScroll : window;
    if (!scrollNodes.anchors) {
      scrollNodes.anchors = [];
      var anchorScroll = getScrollAncestor(rootAnchorRef && rootAnchorRef.current);
      while (anchorScroll && anchorScroll !== menuScroll) {
        scrollNodes.anchors.push(anchorScroll);
        anchorScroll = getScrollAncestor(anchorScroll);
      }
    }
    var scroll = viewScroll;
    if (scrollNodes.anchors.length && scroll === "initial")
      scroll = "auto";
    if (scroll === "initial")
      return;
    var handleScroll = function handleScroll2() {
      if (scroll === "auto") {
        batchedUpdates(function() {
          return handlePosition(true);
        });
      } else {
        safeCall(onClose, {
          reason: CloseReason.SCROLL
        });
      }
    };
    var scrollObservers = scrollNodes.anchors.concat(viewScroll !== "initial" ? menuScroll : []);
    scrollObservers.forEach(function(o) {
      return o.addEventListener("scroll", handleScroll);
    });
    return function() {
      return scrollObservers.forEach(function(o) {
        return o.removeEventListener("scroll", handleScroll);
      });
    };
  }, [rootAnchorRef, scrollNodes, isOpen, onClose, viewScroll, handlePosition]);
  var hasOverflow = !!overflowData && overflowData.overflowAmt > 0;
  (0, import_react8.useEffect)(function() {
    if (hasOverflow || !isOpen || !parentScrollingRef)
      return;
    var handleScroll = function handleScroll2() {
      return batchedUpdates(handlePosition);
    };
    var parentScroll = parentScrollingRef.current;
    parentScroll.addEventListener("scroll", handleScroll);
    return function() {
      return parentScroll.removeEventListener("scroll", handleScroll);
    };
  }, [isOpen, hasOverflow, parentScrollingRef, handlePosition]);
  (0, import_react8.useEffect)(function() {
    if (typeof ResizeObserver !== "function" || reposition === "initial")
      return;
    var resizeObserver = new ResizeObserver(function(_ref2) {
      var entry = _ref2[0];
      var borderBoxSize = entry.borderBoxSize, target = entry.target;
      var width, height;
      if (borderBoxSize) {
        var _ref3 = borderBoxSize[0] || borderBoxSize, inlineSize = _ref3.inlineSize, blockSize = _ref3.blockSize;
        width = inlineSize;
        height = blockSize;
      } else {
        var borderRect = target.getBoundingClientRect();
        width = borderRect.width;
        height = borderRect.height;
      }
      if (width === 0 || height === 0)
        return;
      if (floatEqual(width, latestMenuSize.current.width, 1) && floatEqual(height, latestMenuSize.current.height, 1))
        return;
      (0, import_react_dom2.flushSync)(function() {
        latestHandlePosition.current();
        forceReposSubmenu();
      });
    });
    var observeTarget = menuRef.current;
    resizeObserver.observe(observeTarget, {
      box: "border-box"
    });
    return function() {
      return resizeObserver.unobserve(observeTarget);
    };
  }, [reposition]);
  (0, import_react8.useEffect)(function() {
    if (!isOpen) {
      dispatch(HoverActionTypes.RESET);
      if (!closeTransition)
        setOverflowData();
      return;
    }
    var _ref4 = menuItemFocus || {}, position2 = _ref4.position, alwaysUpdate = _ref4.alwaysUpdate;
    var setItemFocus = function setItemFocus2() {
      if (position2 === FocusPositions.FIRST) {
        dispatch(HoverActionTypes.FIRST);
      } else if (position2 === FocusPositions.LAST) {
        dispatch(HoverActionTypes.LAST);
      } else if (position2 >= -1) {
        dispatch(HoverActionTypes.SET_INDEX, void 0, position2);
      }
    };
    if (alwaysUpdate) {
      setItemFocus();
    } else if (captureFocus) {
      var id = setTimeout(function() {
        if (!menuRef.current.contains(document.activeElement)) {
          focusRef.current.focus();
          setItemFocus();
        }
      }, openTransition ? 170 : 100);
      return function() {
        return clearTimeout(id);
      };
    }
  }, [isOpen, openTransition, closeTransition, captureFocus, menuItemFocus, dispatch]);
  var itemContext = (0, import_react8.useMemo)(function() {
    return {
      isParentOpen: isOpen,
      submenuCtx,
      dispatch,
      updateItems
    };
  }, [isOpen, submenuCtx, dispatch, updateItems]);
  var maxHeight, overflowAmt;
  if (overflowData) {
    setDownOverflow ? overflowAmt = overflowData.overflowAmt : maxHeight = overflowData.height;
  }
  var listContext = (0, import_react8.useMemo)(function() {
    return {
      reposSubmenu,
      submenuCtx,
      overflow,
      overflowAmt,
      parentMenuRef: menuRef,
      parentDir: expandedDirection
    };
  }, [reposSubmenu, submenuCtx, overflow, overflowAmt, expandedDirection]);
  var overflowStyle = maxHeight >= 0 ? {
    maxHeight,
    overflow
  } : void 0;
  var modifiers = (0, import_react8.useMemo)(function() {
    return {
      state,
      dir: expandedDirection
    };
  }, [state, expandedDirection]);
  var arrowModifiers = (0, import_react8.useMemo)(function() {
    return {
      dir: expandedDirection
    };
  }, [expandedDirection]);
  var _arrowClass = useBEM({
    block: menuClass,
    element: menuArrowClass,
    modifiers: arrowModifiers,
    className: arrowClassName
  });
  var menu = (0, import_jsx_runtime3.jsxs)("ul", _extends({
    role: "menu",
    "aria-label": ariaLabel
  }, commonProps(isDisabled), mergeProps({
    onPointerEnter: parentSubmenuCtx == null ? void 0 : parentSubmenuCtx.off,
    onPointerMove,
    onPointerLeave,
    onKeyDown,
    onAnimationEnd
  }, restProps), {
    ref: useCombinedRef(externalRef, menuRef),
    className: useBEM({
      block: menuClass,
      modifiers,
      className: menuClassName
    }),
    style: _extends({}, menuStyle, overflowStyle, {
      margin: 0,
      display: state === "closed" ? "none" : void 0,
      position: positionAbsolute,
      left: menuPosition.x,
      top: menuPosition.y
    }),
    children: [(0, import_jsx_runtime3.jsx)("li", _extends({
      tabIndex: -1,
      style: {
        position: positionAbsolute,
        left: 0,
        top: 0,
        display: "block",
        outline: "none"
      },
      ref: focusRef
    }, dummyItemProps, focusProps)), arrow && (0, import_jsx_runtime3.jsx)("li", _extends({
      className: _arrowClass,
      style: _extends({
        display: "block",
        position: positionAbsolute,
        left: arrowPosition.x,
        top: arrowPosition.y
      }, arrowStyle),
      ref: arrowRef
    }, dummyItemProps)), (0, import_jsx_runtime3.jsx)(MenuListContext.Provider, {
      value: listContext,
      children: (0, import_jsx_runtime3.jsx)(MenuListItemContext.Provider, {
        value: itemContext,
        children: (0, import_jsx_runtime3.jsx)(HoverItemContext.Provider, {
          value: hoverItem,
          children: safeCall(children, modifiers)
        })
      })
    })]
  }));
  return containerProps ? (0, import_jsx_runtime3.jsx)(MenuContainer, _extends({}, containerProps, {
    isOpen,
    children: menu
  })) : menu;
};

// node_modules/@szhsin/react-menu/dist/es/components/ControlledMenu.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded3 = ["aria-label", "className", "containerProps", "initialMounted", "unmountOnClose", "transition", "transitionTimeout", "boundingBoxRef", "boundingBoxPadding", "reposition", "submenuOpenDelay", "submenuCloseDelay", "skipOpen", "viewScroll", "portal", "theming", "onItemClick"];
var ControlledMenu = (0, import_react9.forwardRef)(function ControlledMenu2(_ref, externalRef) {
  var ariaLabel = _ref["aria-label"], className = _ref.className, containerProps = _ref.containerProps, initialMounted = _ref.initialMounted, unmountOnClose = _ref.unmountOnClose, transition = _ref.transition, transitionTimeout = _ref.transitionTimeout, boundingBoxRef = _ref.boundingBoxRef, boundingBoxPadding = _ref.boundingBoxPadding, _ref$reposition = _ref.reposition, reposition = _ref$reposition === void 0 ? "auto" : _ref$reposition, _ref$submenuOpenDelay = _ref.submenuOpenDelay, submenuOpenDelay = _ref$submenuOpenDelay === void 0 ? 300 : _ref$submenuOpenDelay, _ref$submenuCloseDela = _ref.submenuCloseDelay, submenuCloseDelay = _ref$submenuCloseDela === void 0 ? 150 : _ref$submenuCloseDela, skipOpen = _ref.skipOpen, _ref$viewScroll = _ref.viewScroll, viewScroll = _ref$viewScroll === void 0 ? "initial" : _ref$viewScroll, portal = _ref.portal, theming = _ref.theming, onItemClick = _ref.onItemClick, restProps = _objectWithoutPropertiesLoose(_ref, _excluded3);
  var containerRef = (0, import_react9.useRef)(null);
  var scrollNodesRef = (0, import_react9.useRef)({});
  var anchorRef = restProps.anchorRef, state = restProps.state, onClose = restProps.onClose;
  var settings = (0, import_react9.useMemo)(function() {
    return {
      initialMounted,
      unmountOnClose,
      transition,
      transitionTimeout,
      boundingBoxRef,
      boundingBoxPadding,
      rootMenuRef: containerRef,
      rootAnchorRef: anchorRef,
      scrollNodesRef,
      reposition,
      viewScroll,
      submenuOpenDelay,
      submenuCloseDelay
    };
  }, [initialMounted, unmountOnClose, transition, transitionTimeout, anchorRef, boundingBoxRef, boundingBoxPadding, reposition, viewScroll, submenuOpenDelay, submenuCloseDelay]);
  var eventHandlers = (0, import_react9.useMemo)(function() {
    return {
      handleClick: function handleClick(event, isCheckorRadio) {
        if (!event.stopPropagation)
          safeCall(onItemClick, event);
        var keepOpen = event.keepOpen;
        if (keepOpen === void 0) {
          keepOpen = isCheckorRadio && event.key === Keys.SPACE;
        }
        if (!keepOpen) {
          safeCall(onClose, {
            value: event.value,
            key: event.key,
            reason: CloseReason.CLICK
          });
        }
      },
      handleClose: function handleClose(key) {
        safeCall(onClose, {
          key,
          reason: CloseReason.CLICK
        });
      }
    };
  }, [onItemClick, onClose]);
  if (!state)
    return null;
  var menuList = (0, import_jsx_runtime4.jsx)(SettingsContext.Provider, {
    value: settings,
    children: (0, import_jsx_runtime4.jsx)(EventHandlersContext.Provider, {
      value: eventHandlers,
      children: (0, import_jsx_runtime4.jsx)(MenuList, _extends({}, restProps, {
        ariaLabel: ariaLabel || "Menu",
        externalRef,
        containerRef,
        containerProps: {
          className,
          containerRef,
          containerProps,
          skipOpen,
          theming,
          transition,
          onClose
        }
      }))
    })
  });
  if (portal === true && typeof document !== "undefined") {
    return (0, import_react_dom3.createPortal)(menuList, document.body);
  } else if (portal) {
    return portal.target ? (0, import_react_dom3.createPortal)(menuList, portal.target) : portal.stablePosition ? null : menuList;
  }
  return menuList;
});
true ? ControlledMenu.propTypes = _extends({}, rootMenuPropTypes, {
  state: (0, import_prop_types3.oneOf)(values(MenuStateMap)),
  anchorPoint: (0, import_prop_types3.exact)({
    x: import_prop_types3.number,
    y: import_prop_types3.number
  }),
  anchorRef: import_prop_types3.object,
  skipOpen: import_prop_types3.object,
  captureFocus: import_prop_types3.bool,
  menuItemFocus: (0, import_prop_types3.exact)({
    position: (0, import_prop_types3.oneOfType)([import_prop_types3.string, import_prop_types3.number]),
    alwaysUpdate: import_prop_types3.bool
  }),
  onClose: import_prop_types3.func
}) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/Menu.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());

// node_modules/@szhsin/react-menu/dist/es/hooks/useMenuStateAndFocus.js
var import_react11 = __toESM(require_react());

// node_modules/react-transition-state/dist/index.es.js
var import_react10 = __toESM(require_react());
var PRE_ENTER = 0;
var ENTERING = 1;
var ENTERED = 2;
var PRE_EXIT = 3;
var EXITING = 4;
var EXITED = 5;
var UNMOUNTED = 6;
var STATES = ["preEnter", "entering", "entered", "preExit", "exiting", "exited", "unmounted"];
var startOrEnd = function startOrEnd2(unmounted) {
  return unmounted ? UNMOUNTED : EXITED;
};
var updateState = function updateState2(state, setState, latestState, timeoutId, onChange) {
  clearTimeout(timeoutId.current);
  setState(state);
  latestState.current = state;
  onChange && onChange({
    state: STATES[state]
  });
};
var useTransition = function useTransition2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$enter = _ref.enter, enter = _ref$enter === void 0 ? true : _ref$enter, _ref$exit = _ref.exit, exit = _ref$exit === void 0 ? true : _ref$exit, preEnter = _ref.preEnter, preExit = _ref.preExit, timeout = _ref.timeout, initialEntered = _ref.initialEntered, mountOnEnter = _ref.mountOnEnter, unmountOnExit = _ref.unmountOnExit, onChange = _ref.onChange;
  var _useState = (0, import_react10.useState)(initialEntered ? ENTERED : startOrEnd(mountOnEnter)), state = _useState[0], setState = _useState[1];
  var latestState = (0, import_react10.useRef)(state);
  var timeoutId = (0, import_react10.useRef)();
  var enterTimeout, exitTimeout;
  if (typeof timeout === "object") {
    enterTimeout = timeout.enter;
    exitTimeout = timeout.exit;
  } else {
    enterTimeout = exitTimeout = timeout;
  }
  var endTransition = (0, import_react10.useCallback)(function() {
    var newState;
    switch (latestState.current) {
      case ENTERING:
      case PRE_ENTER:
        newState = ENTERED;
        break;
      case EXITING:
      case PRE_EXIT:
        newState = startOrEnd(unmountOnExit);
        break;
    }
    if (newState !== void 0) {
      updateState(newState, setState, latestState, timeoutId, onChange);
    }
  }, [onChange, unmountOnExit]);
  var toggle = (0, import_react10.useCallback)(function(toEnter) {
    var transitState = function transitState2(newState) {
      updateState(newState, setState, latestState, timeoutId, onChange);
      switch (newState) {
        case ENTERING:
          if (enterTimeout >= 0)
            timeoutId.current = setTimeout(endTransition, enterTimeout);
          break;
        case EXITING:
          if (exitTimeout >= 0)
            timeoutId.current = setTimeout(endTransition, exitTimeout);
          break;
        case PRE_ENTER:
        case PRE_EXIT:
          timeoutId.current = setTimeout(function() {
            return transitState2(newState + 1);
          }, 0);
          break;
      }
    };
    var enterStage = latestState.current <= ENTERED;
    if (typeof toEnter !== "boolean")
      toEnter = !enterStage;
    if (toEnter) {
      if (!enterStage) {
        transitState(enter ? preEnter ? PRE_ENTER : ENTERING : ENTERED);
      }
    } else {
      if (enterStage) {
        transitState(exit ? preExit ? PRE_EXIT : EXITING : startOrEnd(unmountOnExit));
      }
    }
  }, [endTransition, onChange, enter, exit, preEnter, preExit, enterTimeout, exitTimeout, unmountOnExit]);
  (0, import_react10.useEffect)(function() {
    return function() {
      return clearTimeout(timeoutId.current);
    };
  }, []);
  return [STATES[state], toggle, endTransition];
};

// node_modules/@szhsin/react-menu/dist/es/hooks/useMenuState.js
var useMenuState = function useMenuState2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, initialOpen = _ref.initialOpen, initialMounted = _ref.initialMounted, unmountOnClose = _ref.unmountOnClose, transition = _ref.transition, _ref$transitionTimeou = _ref.transitionTimeout, transitionTimeout = _ref$transitionTimeou === void 0 ? 500 : _ref$transitionTimeou;
  var _useTransition = useTransition({
    initialEntered: initialOpen,
    mountOnEnter: !initialMounted,
    unmountOnExit: unmountOnClose,
    timeout: transitionTimeout,
    enter: getTransition(transition, "open"),
    exit: getTransition(transition, "close")
  }), state = _useTransition[0], toggleMenu = _useTransition[1], endTransition = _useTransition[2];
  return [{
    state: MenuStateMap[state],
    endTransition
  }, toggleMenu];
};

// node_modules/@szhsin/react-menu/dist/es/hooks/useMenuStateAndFocus.js
var useMenuStateAndFocus = function useMenuStateAndFocus2(options) {
  var _useMenuState = useMenuState(options), menuProps = _useMenuState[0], toggleMenu = _useMenuState[1];
  var _useState = (0, import_react11.useState)(), menuItemFocus = _useState[0], setMenuItemFocus = _useState[1];
  var openMenu = function openMenu2(position, alwaysUpdate) {
    setMenuItemFocus({
      position,
      alwaysUpdate
    });
    toggleMenu(true);
  };
  return [_extends({
    menuItemFocus
  }, menuProps), toggleMenu, openMenu];
};

// node_modules/@szhsin/react-menu/dist/es/hooks/useClick.js
var import_react12 = __toESM(require_react());
var useClick = function useClick2(state, onToggle) {
  if (typeof onToggle !== "function") {
    throw new Error("[React-Menu] useClick/useHover requires a function in the second parameter.");
  }
  var _useState = (0, import_react12.useState)({}), skipOpen = _useState[0];
  return {
    onMouseDown: function onMouseDown() {
      skipOpen.v = state && state !== "closed";
    },
    onClick: function onClick(e) {
      return skipOpen.v ? skipOpen.v = false : onToggle(true, e);
    }
  };
};

// node_modules/@szhsin/react-menu/dist/es/hooks/useMenuChange.js
var import_react13 = __toESM(require_react());
var useMenuChange = function useMenuChange2(onMenuChange, isOpen) {
  var prevOpen = (0, import_react13.useRef)(isOpen);
  (0, import_react13.useEffect)(function() {
    if (prevOpen.current !== isOpen)
      safeCall(onMenuChange, {
        open: isOpen
      });
    prevOpen.current = isOpen;
  }, [onMenuChange, isOpen]);
};

// node_modules/@szhsin/react-menu/dist/es/components/Menu.js
var _excluded4 = ["aria-label", "captureFocus", "initialOpen", "menuButton", "instanceRef", "onMenuChange"];
var Menu = (0, import_react14.forwardRef)(function Menu2(_ref, externalRef) {
  var ariaLabel = _ref["aria-label"], menuButton = _ref.menuButton, instanceRef = _ref.instanceRef, onMenuChange = _ref.onMenuChange, restProps = _objectWithoutPropertiesLoose(_ref, _excluded4);
  var _useMenuStateAndFocus = useMenuStateAndFocus(restProps), stateProps = _useMenuStateAndFocus[0], toggleMenu = _useMenuStateAndFocus[1], openMenu = _useMenuStateAndFocus[2];
  var state = stateProps.state;
  var isOpen = isMenuOpen(state);
  var buttonRef = (0, import_react14.useRef)(null);
  var anchorProps = useClick(state, function(_, e) {
    return openMenu(!e.detail ? FocusPositions.FIRST : void 0);
  });
  var handleClose = (0, import_react14.useCallback)(function(e) {
    toggleMenu(false);
    if (e.key)
      setTimeout(function() {
        var _buttonRef$current;
        return (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
      }, 0);
  }, [toggleMenu]);
  var onKeyDown = function onKeyDown2(e) {
    switch (e.key) {
      case Keys.UP:
        openMenu(FocusPositions.LAST);
        break;
      case Keys.DOWN:
        openMenu(FocusPositions.FIRST);
        break;
      default:
        return;
    }
    e.preventDefault();
  };
  var button = safeCall(menuButton, {
    open: isOpen
  });
  if (!button || !button.type)
    throw new Error("Menu requires a menuButton prop.");
  var buttonProps = _extends({
    ref: useCombinedRef(button.ref, buttonRef)
  }, mergeProps(_extends({
    onKeyDown
  }, anchorProps), button.props));
  if (getName(button.type) === "MenuButton") {
    buttonProps.isOpen = isOpen;
  }
  var renderButton = (0, import_react14.cloneElement)(button, buttonProps);
  useMenuChange(onMenuChange, isOpen);
  (0, import_react14.useImperativeHandle)(instanceRef, function() {
    return {
      openMenu,
      closeMenu: function closeMenu() {
        return toggleMenu(false);
      }
    };
  });
  return (0, import_jsx_runtime5.jsxs)(import_react14.Fragment, {
    children: [renderButton, (0, import_jsx_runtime5.jsx)(ControlledMenu, _extends({}, restProps, stateProps, {
      "aria-label": ariaLabel || (typeof button.props.children === "string" ? button.props.children : "Menu"),
      anchorRef: buttonRef,
      ref: externalRef,
      onClose: handleClose
    }))]
  });
});
true ? Menu.propTypes = _extends({}, rootMenuPropTypes, uncontrolledMenuPropTypes, {
  menuButton: (0, import_prop_types4.oneOfType)([import_prop_types4.element, import_prop_types4.func]).isRequired
}) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/SubMenu.js
var import_react16 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());
var import_prop_types5 = __toESM(require_prop_types());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());

// node_modules/@szhsin/react-menu/dist/es/utils/withHovering.js
var import_react15 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var withHovering = function withHovering2(name, WrappedComponent) {
  var Component = (0, import_react15.memo)(WrappedComponent);
  var WithHovering = (0, import_react15.forwardRef)(function(props, ref) {
    var itemRef = (0, import_react15.useRef)(null);
    return (0, import_jsx_runtime6.jsx)(Component, _extends({}, props, {
      itemRef,
      externalRef: ref,
      isHovering: (0, import_react15.useContext)(HoverItemContext) === itemRef.current
    }));
  });
  WithHovering.displayName = "WithHovering(" + name + ")";
  return WithHovering;
};

// node_modules/@szhsin/react-menu/dist/es/hooks/useItemEffect.js
var useItemEffect = function useItemEffect2(isDisabled, itemRef, updateItems) {
  useIsomorphicLayoutEffect(function() {
    if (!updateItems) {
      throw new Error("[React-Menu] This menu item or submenu should be rendered under a menu: " + itemRef.current.outerHTML);
    }
    if (isDisabled)
      return;
    var item = itemRef.current;
    updateItems(item, true);
    return function() {
      updateItems(item);
    };
  }, [isDisabled, itemRef, updateItems]);
};

// node_modules/@szhsin/react-menu/dist/es/components/SubMenu.js
var _excluded5 = ["aria-label", "className", "disabled", "direction", "label", "openTrigger", "onMenuChange", "isHovering", "instanceRef", "itemRef", "captureFocus", "repositionFlag", "itemProps"];
var _excluded22 = ["ref", "className"];
var SubMenu = withHovering("SubMenu", function SubMenu2(_ref) {
  var ariaLabel = _ref["aria-label"], className = _ref.className, disabled = _ref.disabled, direction = _ref.direction, label = _ref.label, openTrigger = _ref.openTrigger, onMenuChange = _ref.onMenuChange, isHovering = _ref.isHovering, instanceRef = _ref.instanceRef, itemRef = _ref.itemRef, _ref$itemProps = _ref.itemProps, itemProps = _ref$itemProps === void 0 ? {} : _ref$itemProps, restProps = _objectWithoutPropertiesLoose(_ref, _excluded5);
  var settings = (0, import_react16.useContext)(SettingsContext);
  var rootMenuRef = settings.rootMenuRef, submenuOpenDelay = settings.submenuOpenDelay, submenuCloseDelay = settings.submenuCloseDelay;
  var _useContext = (0, import_react16.useContext)(MenuListContext), parentMenuRef = _useContext.parentMenuRef, parentDir = _useContext.parentDir, parentOverflow = _useContext.overflow;
  var _useContext2 = (0, import_react16.useContext)(MenuListItemContext), isParentOpen = _useContext2.isParentOpen, submenuCtx = _useContext2.submenuCtx, dispatch = _useContext2.dispatch, updateItems = _useContext2.updateItems;
  var isPortal = parentOverflow !== "visible";
  var _useMenuStateAndFocus = useMenuStateAndFocus(settings), stateProps = _useMenuStateAndFocus[0], toggleMenu = _useMenuStateAndFocus[1], _openMenu = _useMenuStateAndFocus[2];
  var state = stateProps.state;
  var isDisabled = !!disabled;
  var isOpen = isMenuOpen(state);
  var containerRef = (0, import_react16.useRef)(null);
  var _useState = (0, import_react16.useState)({
    v: 0
  }), timerId = _useState[0];
  var stopTimer = function stopTimer2() {
    submenuCtx.off();
    if (timerId.v) {
      clearTimeout(timerId.v);
      timerId.v = 0;
    }
  };
  var _openMenu2 = function openMenu() {
    stopTimer();
    setHover();
    !isDisabled && _openMenu.apply(void 0, arguments);
  };
  var setHover = function setHover2() {
    return !isHovering && !isDisabled && dispatch(HoverActionTypes.SET, itemRef.current);
  };
  var delayOpen = function delayOpen2(delay) {
    setHover();
    if (!openTrigger)
      timerId.v = setTimeout(function() {
        return batchedUpdates(_openMenu2);
      }, Math.max(delay, 0));
  };
  var onPointerMove = function onPointerMove2(e) {
    if (isDisabled)
      return;
    e.stopPropagation();
    if (timerId.v || isOpen)
      return;
    submenuCtx.on(submenuCloseDelay, function() {
      return delayOpen(submenuOpenDelay - submenuCloseDelay);
    }, function() {
      return delayOpen(submenuOpenDelay);
    });
  };
  var onPointerLeave = function onPointerLeave2() {
    stopTimer();
    if (!isOpen)
      dispatch(HoverActionTypes.UNSET, itemRef.current);
  };
  var onKeyDown = function onKeyDown2(e) {
    if (!isHovering)
      return;
    switch (e.key) {
      case Keys.ENTER:
      case Keys.SPACE:
      case Keys.RIGHT:
        openTrigger !== "none" && _openMenu2(FocusPositions.FIRST);
        break;
    }
  };
  var onKeyDownOfRoot = function onKeyDownOfRoot2(e) {
    var handled = false;
    switch (e.key) {
      case Keys.LEFT:
        if (isOpen) {
          itemRef.current.focus();
          toggleMenu(false);
          handled = true;
        }
        break;
      case Keys.RIGHT:
        if (!isOpen)
          handled = true;
        break;
    }
    if (handled) {
      e.preventDefault();
      e.stopPropagation();
    }
  };
  useItemEffect(isDisabled, itemRef, updateItems);
  useMenuChange(onMenuChange, isOpen);
  (0, import_react16.useEffect)(function() {
    return submenuCtx.toggle(isOpen);
  }, [submenuCtx, isOpen]);
  (0, import_react16.useEffect)(function() {
    return function() {
      return clearTimeout(timerId.v);
    };
  }, [timerId]);
  (0, import_react16.useEffect)(function() {
    if (isHovering && isParentOpen) {
      itemRef.current.focus();
    } else {
      toggleMenu(false);
    }
  }, [isHovering, isParentOpen, toggleMenu, itemRef]);
  (0, import_react16.useImperativeHandle)(instanceRef, function() {
    return {
      openMenu: function openMenu() {
        isParentOpen && _openMenu2.apply(void 0, arguments);
      },
      closeMenu: function closeMenu() {
        if (isOpen) {
          itemRef.current.focus();
          toggleMenu(false);
        }
      }
    };
  });
  var modifiers = (0, import_react16.useMemo)(function() {
    return {
      open: isOpen,
      hover: isHovering,
      disabled: isDisabled,
      submenu: true
    };
  }, [isOpen, isHovering, isDisabled]);
  var externalItemRef = itemProps.ref, itemClassName = itemProps.className, restItemProps = _objectWithoutPropertiesLoose(itemProps, _excluded22);
  var mergedItemProps = mergeProps({
    onPointerEnter: submenuCtx.off,
    onPointerMove,
    onPointerLeave,
    onKeyDown,
    onClick: function onClick() {
      return openTrigger !== "none" && _openMenu2();
    }
  }, restItemProps);
  var getMenuList = function getMenuList2() {
    var menuList = (0, import_jsx_runtime7.jsx)(MenuList, _extends({}, restProps, stateProps, {
      ariaLabel: ariaLabel || (typeof label === "string" ? label : "Submenu"),
      anchorRef: itemRef,
      containerRef: isPortal ? rootMenuRef : containerRef,
      direction: direction || (parentDir === "right" || parentDir === "left" ? parentDir : "right"),
      parentScrollingRef: isPortal && parentMenuRef,
      isDisabled
    }));
    var container = rootMenuRef.current;
    return isPortal && container ? (0, import_react_dom4.createPortal)(menuList, container) : menuList;
  };
  return (0, import_jsx_runtime7.jsxs)("li", {
    className: useBEM({
      block: menuClass,
      element: subMenuClass,
      className
    }),
    style: {
      position: "relative"
    },
    role: roleNone,
    ref: containerRef,
    onKeyDown: onKeyDownOfRoot,
    children: [(0, import_jsx_runtime7.jsx)("div", _extends({
      role: roleMenuitem,
      "aria-haspopup": true,
      "aria-expanded": isOpen
    }, commonProps(isDisabled, isHovering), mergedItemProps, {
      ref: useCombinedRef(externalItemRef, itemRef),
      className: useBEM({
        block: menuClass,
        element: menuItemClass,
        modifiers,
        className: itemClassName
      }),
      children: (0, import_react16.useMemo)(function() {
        return safeCall(label, modifiers);
      }, [label, modifiers])
    })), state && getMenuList()]
  });
});
true ? SubMenu.propTypes = _extends({}, menuPropTypes, uncontrolledMenuPropTypes, {
  disabled: import_prop_types5.bool,
  openTrigger: (0, import_prop_types5.oneOf)(["none", "clickOnly"]),
  label: (0, import_prop_types5.oneOfType)([import_prop_types5.node, import_prop_types5.func]),
  itemProps: (0, import_prop_types5.shape)(_extends({}, stylePropTypes()))
}) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/MenuItem.js
var import_react18 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());

// node_modules/@szhsin/react-menu/dist/es/hooks/useItemState.js
var import_react17 = __toESM(require_react());
var useItemState = function useItemState2(itemRef, focusRef, isHovering, isDisabled) {
  var _useContext = (0, import_react17.useContext)(SettingsContext), submenuCloseDelay = _useContext.submenuCloseDelay;
  var _useContext2 = (0, import_react17.useContext)(MenuListItemContext), isParentOpen = _useContext2.isParentOpen, submenuCtx = _useContext2.submenuCtx, dispatch = _useContext2.dispatch, updateItems = _useContext2.updateItems;
  var setHover = function setHover2() {
    !isHovering && !isDisabled && dispatch(HoverActionTypes.SET, itemRef.current);
  };
  var unsetHover = function unsetHover2() {
    !isDisabled && dispatch(HoverActionTypes.UNSET, itemRef.current);
  };
  var onBlur = function onBlur2(e) {
    if (isHovering && !e.currentTarget.contains(e.relatedTarget))
      unsetHover();
  };
  var onPointerMove = function onPointerMove2(e) {
    if (!isDisabled) {
      e.stopPropagation();
      submenuCtx.on(submenuCloseDelay, setHover, setHover);
    }
  };
  var onPointerLeave = function onPointerLeave2(_, keepHover) {
    submenuCtx.off();
    !keepHover && unsetHover();
  };
  useItemEffect(isDisabled, itemRef, updateItems);
  (0, import_react17.useEffect)(function() {
    if (isHovering && isParentOpen) {
      focusRef.current && focusRef.current.focus();
    }
  }, [focusRef, isHovering, isParentOpen]);
  return {
    setHover,
    onBlur,
    onPointerMove,
    onPointerLeave
  };
};

// node_modules/@szhsin/react-menu/dist/es/components/MenuItem.js
var _excluded6 = ["className", "value", "href", "type", "checked", "disabled", "children", "onClick", "isHovering", "itemRef", "externalRef"];
var _excluded23 = ["setHover"];
var MenuItem = withHovering("MenuItem", function MenuItem2(_ref) {
  var className = _ref.className, value = _ref.value, href = _ref.href, type = _ref.type, checked = _ref.checked, disabled = _ref.disabled, children = _ref.children, onClick = _ref.onClick, isHovering = _ref.isHovering, itemRef = _ref.itemRef, externalRef = _ref.externalRef, restProps = _objectWithoutPropertiesLoose(_ref, _excluded6);
  var isDisabled = !!disabled;
  var _useItemState = useItemState(itemRef, itemRef, isHovering, isDisabled), setHover = _useItemState.setHover, restStateProps = _objectWithoutPropertiesLoose(_useItemState, _excluded23);
  var eventHandlers = (0, import_react18.useContext)(EventHandlersContext);
  var radioGroup = (0, import_react18.useContext)(RadioGroupContext);
  var isRadio = type === "radio";
  var isCheckBox = type === "checkbox";
  var isAnchor = !!href && !isDisabled && !isRadio && !isCheckBox;
  var isChecked = isRadio ? radioGroup.value === value : isCheckBox ? !!checked : false;
  var handleClick = function handleClick2(e) {
    if (isDisabled) {
      e.stopPropagation();
      e.preventDefault();
      return;
    }
    var event = {
      value,
      syntheticEvent: e
    };
    if (e.key !== void 0)
      event.key = e.key;
    if (isCheckBox)
      event.checked = !isChecked;
    if (isRadio)
      event.name = radioGroup.name;
    safeCall(onClick, event);
    if (isRadio)
      safeCall(radioGroup.onRadioChange, event);
    eventHandlers.handleClick(event, isCheckBox || isRadio);
  };
  var handleKeyDown = function handleKeyDown2(e) {
    if (!isHovering)
      return;
    switch (e.key) {
      case Keys.ENTER:
      case Keys.SPACE:
        isAnchor ? e.key === Keys.SPACE && itemRef.current.click() : handleClick(e);
    }
  };
  var modifiers = (0, import_react18.useMemo)(function() {
    return {
      type,
      disabled: isDisabled,
      hover: isHovering,
      checked: isChecked,
      anchor: isAnchor
    };
  }, [type, isDisabled, isHovering, isChecked, isAnchor]);
  var mergedProps = mergeProps(_extends({}, restStateProps, {
    onPointerDown: setHover,
    onKeyDown: handleKeyDown,
    onClick: handleClick
  }), restProps);
  var menuItemProps = _extends({
    role: isRadio ? "menuitemradio" : isCheckBox ? "menuitemcheckbox" : roleMenuitem,
    "aria-checked": isRadio || isCheckBox ? isChecked : void 0
  }, commonProps(isDisabled, isHovering), mergedProps, {
    ref: useCombinedRef(externalRef, itemRef),
    className: useBEM({
      block: menuClass,
      element: menuItemClass,
      modifiers,
      className
    }),
    children: (0, import_react18.useMemo)(function() {
      return safeCall(children, modifiers);
    }, [children, modifiers])
  });
  return isAnchor ? (0, import_jsx_runtime8.jsx)("li", {
    role: roleNone,
    children: (0, import_jsx_runtime8.jsx)("a", _extends({
      href
    }, menuItemProps))
  }) : (0, import_jsx_runtime8.jsx)("li", _extends({}, menuItemProps));
});
true ? MenuItem.propTypes = _extends({}, stylePropTypes(), {
  value: import_prop_types6.any,
  href: import_prop_types6.string,
  type: (0, import_prop_types6.oneOf)(["checkbox", "radio"]),
  checked: import_prop_types6.bool,
  disabled: import_prop_types6.bool,
  children: (0, import_prop_types6.oneOfType)([import_prop_types6.node, import_prop_types6.func]),
  onClick: import_prop_types6.func
}) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/FocusableItem.js
var import_react19 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var _excluded7 = ["className", "disabled", "children", "isHovering", "itemRef", "externalRef"];
var _excluded24 = ["setHover", "onPointerLeave"];
var FocusableItem = withHovering("FocusableItem", function FocusableItem2(_ref) {
  var className = _ref.className, disabled = _ref.disabled, children = _ref.children, isHovering = _ref.isHovering, itemRef = _ref.itemRef, externalRef = _ref.externalRef, restProps = _objectWithoutPropertiesLoose(_ref, _excluded7);
  var isDisabled = !!disabled;
  var ref = (0, import_react19.useRef)(null);
  var _useItemState = useItemState(itemRef, ref, isHovering, isDisabled), setHover = _useItemState.setHover, _onPointerLeave = _useItemState.onPointerLeave, restStateProps = _objectWithoutPropertiesLoose(_useItemState, _excluded24);
  var _useContext = (0, import_react19.useContext)(EventHandlersContext), handleClose = _useContext.handleClose;
  var modifiers = (0, import_react19.useMemo)(function() {
    return {
      disabled: isDisabled,
      hover: isHovering,
      focusable: true
    };
  }, [isDisabled, isHovering]);
  var renderChildren = (0, import_react19.useMemo)(function() {
    return safeCall(children, _extends({}, modifiers, {
      ref,
      closeMenu: handleClose
    }));
  }, [children, modifiers, handleClose]);
  var mergedProps = mergeProps(_extends({}, restStateProps, {
    onPointerLeave: function onPointerLeave(e) {
      return _onPointerLeave(e, true);
    },
    onFocus: setHover
  }), restProps);
  return (0, import_jsx_runtime9.jsx)("li", _extends({
    role: roleMenuitem
  }, commonProps(isDisabled), mergedProps, {
    ref: useCombinedRef(externalRef, itemRef),
    className: useBEM({
      block: menuClass,
      element: menuItemClass,
      modifiers,
      className
    }),
    children: renderChildren
  }));
});
true ? FocusableItem.propTypes = _extends({}, stylePropTypes(), {
  disabled: import_prop_types7.bool,
  children: import_prop_types7.func
}) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/MenuDivider.js
var import_react20 = __toESM(require_react());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var _excluded8 = ["className"];
var MenuDivider = (0, import_react20.memo)((0, import_react20.forwardRef)(function MenuDivider2(_ref, externalRef) {
  var className = _ref.className, restProps = _objectWithoutPropertiesLoose(_ref, _excluded8);
  return (0, import_jsx_runtime10.jsx)("li", _extends({
    role: "separator"
  }, restProps, {
    ref: externalRef,
    className: useBEM({
      block: menuClass,
      element: menuDividerClass,
      className
    })
  }));
}));
true ? MenuDivider.propTypes = _extends({}, stylePropTypes()) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/MenuHeader.js
var import_react21 = __toESM(require_react());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var _excluded9 = ["className"];
var MenuHeader = (0, import_react21.memo)((0, import_react21.forwardRef)(function MenuHeader2(_ref, externalRef) {
  var className = _ref.className, restProps = _objectWithoutPropertiesLoose(_ref, _excluded9);
  return (0, import_jsx_runtime11.jsx)("li", _extends({
    role: roleNone
  }, restProps, {
    ref: externalRef,
    className: useBEM({
      block: menuClass,
      element: menuHeaderClass,
      className
    })
  }));
}));
true ? MenuHeader.propTypes = _extends({}, stylePropTypes()) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/MenuGroup.js
var import_react22 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var _excluded10 = ["className", "style", "takeOverflow"];
var MenuGroup = (0, import_react22.forwardRef)(function MenuGroup2(_ref, externalRef) {
  var className = _ref.className, style = _ref.style, takeOverflow = _ref.takeOverflow, restProps = _objectWithoutPropertiesLoose(_ref, _excluded10);
  var ref = (0, import_react22.useRef)(null);
  var _useState = (0, import_react22.useState)(), overflowStyle = _useState[0], setOverflowStyle = _useState[1];
  var _useContext = (0, import_react22.useContext)(MenuListContext), overflow = _useContext.overflow, overflowAmt = _useContext.overflowAmt;
  useIsomorphicLayoutEffect(function() {
    var maxHeight;
    if (takeOverflow && overflowAmt >= 0) {
      maxHeight = ref.current.getBoundingClientRect().height - overflowAmt;
      if (maxHeight < 0)
        maxHeight = 0;
    }
    setOverflowStyle(maxHeight >= 0 ? {
      maxHeight,
      overflow
    } : void 0);
  }, [takeOverflow, overflow, overflowAmt]);
  useIsomorphicLayoutEffect(function() {
    if (overflowStyle)
      ref.current.scrollTop = 0;
  }, [overflowStyle]);
  return (0, import_jsx_runtime12.jsx)("div", _extends({}, restProps, {
    ref: useCombinedRef(externalRef, ref),
    className: useBEM({
      block: menuClass,
      element: menuGroupClass,
      className
    }),
    style: _extends({}, style, overflowStyle)
  }));
});
true ? MenuGroup.propTypes = _extends({}, stylePropTypes(), {
  takeOverflow: import_prop_types8.bool
}) : void 0;

// node_modules/@szhsin/react-menu/dist/es/components/MenuRadioGroup.js
var import_react23 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var _excluded11 = ["aria-label", "className", "name", "value", "onRadioChange"];
var MenuRadioGroup = (0, import_react23.forwardRef)(function MenuRadioGroup2(_ref, externalRef) {
  var ariaLabel = _ref["aria-label"], className = _ref.className, name = _ref.name, value = _ref.value, onRadioChange = _ref.onRadioChange, restProps = _objectWithoutPropertiesLoose(_ref, _excluded11);
  var contextValue = (0, import_react23.useMemo)(function() {
    return {
      name,
      value,
      onRadioChange
    };
  }, [name, value, onRadioChange]);
  return (0, import_jsx_runtime13.jsx)(RadioGroupContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime13.jsx)("li", {
      role: roleNone,
      children: (0, import_jsx_runtime13.jsx)("ul", _extends({
        role: "group",
        "aria-label": ariaLabel || name || "Radio group"
      }, restProps, {
        ref: externalRef,
        className: useBEM({
          block: menuClass,
          element: radioGroupClass,
          className
        })
      }))
    })
  });
});
true ? MenuRadioGroup.propTypes = _extends({}, stylePropTypes(), {
  name: import_prop_types9.string,
  value: import_prop_types9.any,
  onRadioChange: import_prop_types9.func
}) : void 0;

// node_modules/@szhsin/react-menu/dist/es/hooks/useHover.js
var import_react24 = __toESM(require_react());
var useHover = function useHover2(isOpen, onToggle, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$openDelay = _ref.openDelay, openDelay = _ref$openDelay === void 0 ? 100 : _ref$openDelay, _ref$closeDelay = _ref.closeDelay, closeDelay = _ref$closeDelay === void 0 ? 300 : _ref$closeDelay;
  var _useState = (0, import_react24.useState)({}), config = _useState[0];
  var clearTimer = function clearTimer2() {
    return clearTimeout(config.t);
  };
  var delayAction = function delayAction2(toOpen) {
    return function(e) {
      clearTimer();
      config.t = setTimeout(function() {
        return onToggle(toOpen, e);
      }, toOpen ? openDelay : closeDelay);
    };
  };
  var props = {
    onMouseEnter: delayAction(true),
    onMouseLeave: delayAction(false)
  };
  return {
    anchorProps: _extends({}, props, useClick(isOpen, onToggle)),
    hoverProps: _extends({}, props, {
      onMouseEnter: clearTimer
    })
  };
};
export {
  ControlledMenu,
  FocusableItem,
  Menu,
  MenuButton,
  MenuDivider,
  MenuGroup,
  MenuHeader,
  MenuItem,
  MenuRadioGroup,
  SubMenu,
  useClick,
  useHover,
  useMenuState
};
//# sourceMappingURL=@szhsin_react-menu.js.map
